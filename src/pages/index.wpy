<style lang="less">
  .page {
    position: relative;
    min-height: 100%;
  }
  .page-bottom {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    min-height: 100%;
    background: #f66;
    color: #fff;
  }
  .page-top {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    min-height: 100%;
    background: #66f;
    color: #fff;
    transition: 300ms;
  }
  .c-state2{
    transform: rotate(0deg) scale(.8) translate(75%,0%);
  }
</style>
<template>
  <view class="page" catchtap="tap_close">
    <view class="page-bottom">
      <view class="page-content">
        <view  class="wc">
          <text>第一个item1</text>
        </view>
        <view  class="wc">
          <text>第二个item2</text>
        </view>
        <view  class="wc">
          <text>第三个item3</text>
        </view>
        <view  class="wc">
          <text>第四个item4</text>
        </view>
      </view>
    </view>
    <view class="page-top {{open ? 'c-state2' : ''}}" catchtap="tap_close">
      <view catchtap="tap_open">点我</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  export default class Index extends wepy.page {

    customData = {}  // 自定义数据

    customFunction ()　{}  //自定义方法

    onLoad () {}  // 在Page和Component共用的生命周期函数

    onShow () {}  // 只在Page中存在的页面生命周期函数

    config = {};  // 只在Page实例中存在的配置数据，对应于原生的page.json文件

    data = {
      open: false
    }

    components = {};  // 声明页面中所引用的组件，或声明组件中所引用的子组件

    mixins = [];  // 声明页面所引用的Mixin实例

    computed = {};  // 声明计算属性（详见后文介绍）

    watch = {};  // 声明数据watcher（详见后文介绍）

    methods = {
      tap_open(e) {
        console.log(this.open)
        this.open = true
      },
      tap_close(e){
        console.log(this.open)
        this.open = false
      }
    };  // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

    events = {};  // 声明组件之间的事件处理函数
  }
</script>
